import type { Plugin } from 'rollup';

/**
 * Options for the dts-merger plugin
 */
export interface DtsMergerOptions {
  /**
   * Input directory containing TypeScript declaration files
   * @default 'src'
   */
  inputDir?: string;

  /**
   * Output file path for the merged declaration file
   * @default 'dist/index.d.ts'
   */
  outputFile?: string;

  /**
   * Whether to include internal/private declarations
   * @default false
   */
  includePrivate?: boolean;

  /**
   * Custom header to add to the merged file
   */
  header?: string;

  /**
   * File patterns to exclude from merging
   * @default ['**\/*.test.d.ts', '**\/*.spec.d.ts']
   */
  exclude?: string[];
}

/**
 * Creates a Rollup plugin that merges TypeScript declaration files
 *
 * @param options - Configuration options for the plugin
 * @returns A Rollup plugin instance
 *
 * @example
 * ```typescript
 * import dtsMerger from 'rollup-plugin-dts-merger';
 *
 * export default {
 *   input: 'src/index.ts',
 *   output: {
 *     file: 'dist/bundle.js',
 *     format: 'es'
 *   },
 *   plugins: [
 *     dtsMerger({
 *       inputDir: 'src',
 *       outputFile: 'dist/types.d.ts',
 *       includePrivate: false
 *     })
 *   ]
 * };
 * ```
 */
export default function dtsMerger(options?: DtsMergerOptions): Plugin {
  const opts: Required<DtsMergerOptions> = {
    inputDir: 'src',
    outputFile: 'dist/index.d.ts',
    includePrivate: false,
    header: '// Auto-generated by rollup-plugin-dts-merger',
    exclude: ['**/*.test.d.ts', '**/*.spec.d.ts'],
    ...options,
  };

  return {
    name: 'dts-merger',

    /**
     * Build start hook - initialize the plugin
     */
    buildStart() {
      // Plugin initialization logic will be implemented here
      console.log(`ðŸ”§ DTS Merger plugin initialized with options:`, opts);
    },

    /**
     * Generate bundle hook - merge declaration files
     */
    generateBundle() {
      // Declaration file merging logic will be implemented here
      console.log(`ðŸ“¦ Merging TypeScript declaration files from ${opts.inputDir}...`);
    },

    /**
     * Write bundle hook - write merged declarations
     */
    writeBundle() {
      // Final file writing logic will be implemented here
      console.log(`âœ… TypeScript declarations merged to ${opts.outputFile}`);
    },
  };
}
